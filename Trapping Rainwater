Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        // int[] leftGreater = new int[n];
        // int[] rightGreater = new int[n];

        // leftGreater[0] = height[0];
        // rightGreater[n-1] = height[n-1];

        // for(int i=1; i<n; i++){
        //     leftGreater[i] = Math.max(height[i],leftGreater[i-1]);
        // } 

        // for(int i=n-2; i>=0; i--){
        //     rightGreater[i] = Math.max(height[i],rightGreater[i+1]);
        // }

        // int waterTrapped = 0;

        // for(int i=0; i<n; i++){
        //     waterTrapped += (Math.min(leftGreater[i],rightGreater[i]) - height[i]);
        // }
       
        // return waterTrapped;
        int l = 0, r = n-1;
        int waterTrapped = 0;
        int lmax = Integer.MIN_VALUE, rmax = Integer.MIN_VALUE;
        while(l < r){
            lmax = Math.max(lmax,height[l]);
            rmax = Math.max(rmax,height[r]);
            waterTrapped += (lmax < rmax) ? (lmax - height[l++]) : (rmax - height[r--]);
        }
        return waterTrapped;
    }

}
