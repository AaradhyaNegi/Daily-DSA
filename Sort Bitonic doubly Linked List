Problem statement
Sort the given biotonic doubly linked list.

Note :
Biotonic Doubly linked list is the one which is first increasing and then decreasing. A strictly increasing or strictly decreasing doubly linked list is also biotonic.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= T <= 10
1 <= N <= 5 * 10^4
-10^9 <= data <= 10^9 and data != -1
Where T is the number of test cases, N is the length of the doubly linked list.

Time Limit : 1sec
Sample Input 1:
3
1 5 8 4 2 -1
9 10 -1
4 3 -1
Sample Output 1:
1 2 4 5 8 -1
9 10 -1
3 4 -1
Explanation for Sample Input 1:
For first test case : 
On sorting the doubly linked list, we get
1 2 4 5 8
Sample Input 2:
2
1 4 4 3 2 -1
5
1 1 1 1 1 -1
Sample Output 2:
1 2 3 4 4 -1
1 1 1 1 1 -1



import java.util.* ;
import java.io.*; 
/****************************************************************

    Following is the class structure of the Node class:

      class Node<T> {
        T data;
        Node<T> next;
        Node<T> prev;

        public Node(T data) {
            this.data = data;
        }
    }

*****************************************************************/
public class Solution {

    public static Node<Integer> sortDLL(Node<Integer> head) {
        // Write your code here.
        if (head == null || head.next == null) {
            return head;
        }

        Node<Integer> front = head;
        Node<Integer> last = head;
        Node<Integer> res = new Node<>(-1);
        Node<Integer> resEnd = res;
        Node<Integer> next;

        // Find the last node in the list
        while (last.next != null) {
            last = last.next;
        }

        // Compare and merge the two halves
        while (front != last) {
            if (front.data <= last.data) {
                resEnd.next = front;
                next = front.next;
                front.next = null;
                front.prev = resEnd;
                front = next;
            } else {
                resEnd.next = last;
                next = last.prev;
                last.prev.next = null;
                last.prev = resEnd;
                last = next;
            }
            resEnd = resEnd.next;
        }

        // Add the remaining node to the result list
        resEnd.next = front;
        front.prev = resEnd;

        return res.next;
        
    }

}


