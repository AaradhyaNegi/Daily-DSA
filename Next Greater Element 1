The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.
 

Constraints:

1 <= nums1.length <= nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 104
All integers in nums1 and nums2 are unique.
All the integers of nums1 also appear in nums2.
 

Follow up: Could you find an O(nums1.length + nums2.length) solution?

class Solution {
    public int search(int arr[],int n){
        for(int i=0; i<arr.length; i++){
            if(arr[i] == n){
                return i;
            }
        }
        return -1;
    }
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
    //     int n = nums1.length;
    //     int m = nums2.length;
    //     int[] nextGreater = new int[m];
    //     Stack<Integer> s = new Stack<>();

    //     nextGreater[m-1] = -1;
    //     s.push(nums2[m-1]);

    //     for(int i=m-2; i>=0; i--){
    //         while(!s.isEmpty() && nums2[i] >= s.peek()){
    //             s.pop();
    //         }
    //         if(s.isEmpty()){
    //             nextGreater[i] = -1;
    //         }else{
    //             nextGreater[i] = s.peek();
    //         }
    //         s.push(nums2[i]);
    //     }
    
    // int ans[] = new int[n];
    // for(int i=0; i<n; i++){
    //     int idx = search(nums2,nums1[i]);
        
    //     ans[i] = nextGreater[idx];
    // }
    // return ans;

    int[] ans = new int[nums1.length];
    int idx[] = new int[10001];

    for(int i=0; i<nums2.length; i++){
        idx[nums2[i]] = i;
    }
    for(int i=0; i<nums1.length; i++){
        ans[i] = find(nums2,idx[nums1[i]]);
    }
    return ans;
    }
public int find(int [] arr,int cur){
    for(int i=cur+1;i<arr.length; i++){
        if(arr[i] > arr[cur]){
            return arr[i];
        }
    }
    return -1;
}

}
