Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

class Solution {
    
    public void findSubsets(int[] nums, int idx,List<Integer> subset,List<List<Integer>> result){
        if(!subset.isEmpty()){
            if(!result.contains(subset)){
                result.add(new ArrayList<>(subset));
            }
        }
        
        // result.add(new ArrayList<>(subset));
        for(int i=idx; i<nums.length; i++){
            subset.add(nums[i]);
            findSubsets(nums,i+1,subset,result);
            subset.remove(subset.size() - 1);
        }
    }
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subset = new ArrayList<>();
        findSubsets(nums,0,subset,result);
        result.add(new ArrayList<>());
        return result;
    }
   

    
}
