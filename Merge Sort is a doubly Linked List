Given Pointer/Reference to the head of a doubly linked list of N nodes, the task is to Sort the given doubly linked list using Merge Sort in both non-decreasing and non-increasing order.

Example 1:

Input:
N = 8
value[] = {7,3,5,2,6,4,1,8}
Output:
1 2 3 4 5 6 7 8
8 7 6 5 4 3 2 1
Explanation: After sorting the given
linked list in both ways, resultant
matrix will be as given in the first
two line of output, where first line
is the output for non-decreasing
order and next line is for non-
increasing order.
Example 2:

Input:
N = 5
value[] = {9,15,0,-1,0}
Output:
-1 0 0 9 15
15 9 0 0 -1
Explanation: After sorting the given
linked list in both ways, the
resultant list will be -1 0 0 9 15
in non-decreasing order and 
15 9 0 0 -1 in non-increasing order.
Your Task:
The task is to complete the function sortDoubly() which sorts the doubly linked list. The printing is done automatically by the driver code.

Constraints:
1 <= N <= 105



//User function Template for Java

/*
class Node
{
    int data;
    Node next, prev;
    Node(int data)
    {
        this.data = data;
        next = prev = null;
    }
}
*/
class LinkedList
{
    //Function to sort the given doubly linked list using Merge Sort.
    static Node findMid(Node head){
        Node slow = head;
        Node fast = head.next;
        
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return slow;
    }
  static Node merge(Node head1, Node head2) {
    Node merged = new Node(-1);
    Node temp = merged;

    while (head1 != null && head2 != null) {
        if (head1.data < head2.data) {
            temp.next = head1;
            head1.prev = temp;  
            head1 = head1.next;
        } else {
            temp.next = head2;
            head2.prev = temp;  
            head2 = head2.next;
        }
        temp = temp.next;
    }

    
    while (head1 != null) {
        temp.next = head1;
        head1.prev = temp;  
        head1 = head1.next;
        temp = temp.next;
    }

    while (head2 != null) {
        temp.next = head2;
        head2.prev = temp;  
        head2 = head2.next;
        temp = temp.next;
    }
    merged = merged.next;
    merged.prev = null;
    return merged;
}

   static Node mergeSort(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node mid = findMid(head);
        Node nextToMid = mid.next;

        mid.next = null;
        nextToMid.prev = null;

        Node sortedFirstHalf = mergeSort(head);
        Node sortedSecondHalf = mergeSort(nextToMid);


        return merge(sortedFirstHalf, sortedSecondHalf);
    }

    static Node sortDoubly(Node head)
    {
        return mergeSort(head);
    }
}


